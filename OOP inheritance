# Vehicle Inheritance:
# Create a base class Vehicle with attributes like make, model, and
# methods like start_engine and stop_engine. Then, create two subclasses Car
# and Motorcycle that inherit from the Vehicle class and add specific attributes and methods.
class Vehicle:
    def __init__(self,make,model):
        self.make = make
        self.model = model
    def start_engine(self):
        print(f"Engine start for {self.model}")
    def stop_enginee(self):
        print(f"Stop engine for {self.model}")
class Car(Vehicle):
    def details(self):
        print(f"Car name {self.make} and model {self.model}.")
    def car_speed(self):
        print("The highest speed of the car is 300 K.M.")
class Motorcycle(Vehicle):
    def details2(self):
        print(f"Motorcycle name {self.make} and model {self.model}.")
    def motorcycle_speed(self):
        print("The highest speed of the motorcycle is 200 K.M.")

car1 = Car("lamborgini","43DCU30")
motorcycle = Motorcycle("Kawasaki Ninja","H2R")
car1.start_engine()
car1.stop_enginee()
motorcycle.start_engine()
motorcycle.stop_enginee()
car1.details()
car1.car_speed()
motorcycle.details2()
motorcycle.motorcycle_speed()

# Geometry Shapes:
# Define a base class Shape with methods for calculating area and perimeter.
# Create subclasses like Rectangle, Circle, and Triangle that inherit from Shape
# and implement their own area and perimeter calculation methods.
import math
class Shape:
    def area(self):
        pass
    def perimeter(self):
        pass
class Rectangle(Shape):
    def __init__(self,height,width):
        self.height = height
        self.width = width
    def area(self):
        area = self.height * self.width
        return area
    def perimeter(self):
        return 2*(self.width + self.height)
class Circle(Shape):
    def __init__(self,radius):
        self.radius = radius
    def area(self):
        return math.pi * (self.radius ** 2)
    def perimeter(self):
        return 2 * math.pi * self.radius
class Triangle(Shape):
    def __init__(self,height,base,s1,s2,s3):
        self.height = height
        self.base = base
        self.s1 = s1
        self.s2 = s2
        self.s3 = s3
    def area(self):
        return self.height * self.base
    def perimeter(self):
        return self.s1 + self.s2 + self.s3
# creating object of circle class.
circle1 = Circle(5)
print(circle1.area())
print(circle1.perimeter())
# creating object of rectangle class.
rectangle1 = Rectangle(5,3)
print(rectangle1.area())
print(rectangle1.perimeter())
# creating object of triangle class.
triangle1 = Triangle(10,7,7,8,9)
print(triangle1.area())
print(triangle1.perimeter())



# Employee Hierarchy:
# Create a base class Employee with attributes like name, employee_id,
# and a method to calculate salary. Then, create subclasses for different
# types of employees, such as Manager, Engineer, and Salesperson, which
# inherit from the Employee class and have their own salary calculation methods.
class Employee:
    def __init__(self,name,id):
        self.name = name
        self.id = id
    def salary(self):
        pass
class Manager(Employee):
    def salary(self):
        print(f"The salary for {self.name} whom id is :{self.id} .Position : Manager. his salary is :67,000 $")

class Engineer(Employee):
    def salary(self):
        print(f"The salary for {self.name} whom id is :{self.id} .Position : Engineer. his salary is :65,000 $")
class Salesperson(Employee):
    def salary(self):
        print(f"The salary for {self.name} whom id is :{self.id} .Position : Salesperson. his salary is :50,000 $")
manager = Manager("Tyson",56)
manager.salary()
engineer = Engineer("Sayeed",32)
engineer.salary()
salesman = Salesperson("Kai",312)
salesman.salary()
# Bank Accounts:
# Implement a base class BankAccount with attributes like account_number,
# balance, and methods like deposit and withdraw. Create subclasses for different
# types of accounts, such as SavingsAccount and CheckingAccount, that inherit
# from the BankAccount class and have specific methods like add_interest for savings accounts.
class Bank_account:
    def __init__(self,account_number=0,balance=0):
        self.account_number = account_number
        self.balance = balance
    def deposit(self,amount):
        if amount > 0:
            print(f"Successfully added {amount}.")
            self.balance += amount
        else:
            print("Insufficient balance.")
    def withdraw(self,amount):
        if amount < self.balance:
            self.balance -= amount
            print(f"successfully withdrawed {amount} $")
        else:
            print("Insufficient balance.")
class SavingsAccount(Bank_account):
    def add_interest(self):
        self.balance += (self.balance * 0.25)
        print(f"successfully added interest to your amount .")
class CheckingAccount(SavingsAccount):
    def cheak_balance(self):
        return f"current balance is {self.balance} $"



ppl1 = CheckingAccount(1000,0)
ppl1.deposit(5400)
ppl1.deposit(500)
ppl1.add_interest()
ppl1.withdraw(7000)

print(ppl1.cheak_balance())
